name: Windows Tests

on:
  push:
    branches:
      - develop2
      - release/*
  pull_request:
    branches:
      - '*'

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  testing:
    strategy:
      fail-fast: true
      matrix:
        python-version: ['3.9']
        test-type: [unittests, integration, functional]

    runs-on: windows-2019

    name: Conan (${{ matrix.test-type }}) (${{ matrix.python-version }})

    steps:

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache pip packages
        id: cache-pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('conans/requirements*.txt') }}

      - name: Install Python requirements
        run: |
          pip install --upgrade pip
          pip install -r conans/requirements.txt
          pip install -r conans/requirements_server.txt
          pip install -r conans/requirements_dev.txt
          pip install meson

      - name: Install Chocolatey packages
        if: matrix.test-type == 'functional'
        run: |
          choco install pkgconfiglite --version 0.28
          choco install ninja --version 1.10.2
          choco install mingw

      - name: Cache CMake and Bazel installations
        if: matrix.test-type == 'functional'
        id: cache-tools
        uses: actions/cache@v4
        with:
          path: |
            C:\Tools\CMake\3.15.7
            C:\Tools\CMake\3.19.7
            C:\Tools\CMake\3.23.5
            C:\Tools\bazel\6.3.2
            C:\Tools\bazel\7.1.2
          key: ${{ runner.os }}-conan-tools-cache

      - name: Build CMake old versions of CMake
        if: matrix.test-type == 'functional' && steps.cache-tools.outputs.cache-hit != 'true'
        run: |
          @echo off
          setlocal enabledelayedexpansion
          set CMAKE_BUILD_VERSIONS=3.15.7
          for %%v in (%CMAKE_BUILD_VERSIONS%) do (
              echo Downloading CMake version %%v for Windows...
              set "destination=C:\Tools\CMake\%%v"
              if not exist "!destination!" (
                  mkdir "!destination!"
              )
              for /f "tokens=1,2 delims=." %%a in ("%%v") do (
                  set "version_major_minor=%%a.%%b"
              )
              set "url=https://cmake.org/files/v!version_major_minor!/cmake-%%v-win64-x64.zip"
              curl -L -o "cmake-%%v-windows-x86_64.zip" !url!
              tar -xf "cmake-%%v-windows-x86_64.zip" -C "!destination!"
              del "cmake-%%v-windows-x86_64.zip"
          )
          endlocal

      - name: Install modern CMake versions
        if: matrix.test-type == 'functional' && steps.cache-tools.outputs.cache-hit != 'true'
        run: |
          @echo off
          setlocal enabledelayedexpansion
          set CMAKE_BUILD_VERSIONS=3.19.7 3.23.5
          for %%v in (%CMAKE_BUILD_VERSIONS%) do (
              echo Downloading CMake version %%v for Windows...
              set "destination=C:\Tools\CMake\%%v"
              if not exist "!destination!" (
                  mkdir "!destination!"
              )
              for /f "tokens=1,2 delims=." %%a in ("%%v") do (
                  set "version_major_minor=%%a.%%b"
              )
              set "url=https://cmake.org/files/v!version_major_minor!/cmake-%%v-windows-x86_64.zip"
              curl -L -o "cmake-%%v-windows-x86_64.zip" !url!
              tar -xf "cmake-%%v-windows-x86_64.zip" -C "!destination!"
              del "cmake-%%v-windows-x86_64.zip"
          )
          endlocal
      - name: Install Bazel versions
        if: matrix.test-type == 'functional' && steps.cache-tools.outputs.cache-hit != 'true'
        run: |
          @echo off
          setlocal enabledelayedexpansion
          set BAZEL_BUILD_VERSIONS=6.3.2 7.1.2
          for %%v in (%BAZEL_BUILD_VERSIONS%) do (
              echo Downloading Bazel version %%v for Windows...
              set "destination=C:\Tools\bazel\%%v"
              if not exist "!destination!" (
                  mkdir "!destination!"
              )
              set "url=https://github.com/bazelbuild/bazel/releases/download/%%v/bazel-%%v-windows-x86_64.zip"
              curl -L -o "bazel-%%v-windows-x86_64.zip" !url!
              tar -xf "bazel-%%v-windows-x86_64.zip" -C "!destination!"
              del "bazel-%%v-windows-x86_64.zip"
          )
          endlocal
      - name: Run Tests
        run: |
          @echo off
          setlocal
          for /f "tokens=2 delims==" %%a in ('wmic cpu get NumberOfCores /value ^| find "="') do set NUM_CPUS=%%a
          echo Number of CPUs available: %NUM_CPUS%
          if "%{{ matrix.test-type }}%"=="unittests" (
              pytest test/unittests --durations=20 -n %NUM_CPUS%
          ) else if "%{{ matrix.test-type }}%"=="integration" (
              pytest test/integration --durations=20 -n %NUM_CPUS%
          ) else if "%{{ matrix.test-type }}%"=="functional" (
              pytest test/functional --durations=20 -n %NUM_CPUS%
          )
          endlocal
