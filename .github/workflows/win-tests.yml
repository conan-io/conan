name: Windows Tests

on:
  push:
    branches:
      - develop2
      - release/*
  pull_request:
    branches:
      - '*'

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  testing:
    strategy:
      fail-fast: true
      matrix:
        python-version: ['3.9']

    runs-on: windows-2022

    name: Conan (${{ matrix.python-version }})

    steps:

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache pip packages
        uses: actions/cache@v4
        with:
          path: C:\Users\runneradmin\AppData\Local\pip\cache
          key: pip-packages-${{ runner.os }}-${{ hashFiles('conans/requirements*.txt') }}
          restore-keys: |
            pip-packages-${{ runner.os }}-

      - name: Install Python requirements
        run: |
          pip install --upgrade pip
          pip install -r conans/requirements.txt
          pip install -r conans/requirements_server.txt
          pip install -r conans/requirements_dev.txt
          pip install meson

      - name: Install Chocolatey packages
        run: |
          choco install pkgconfiglite --version 0.28
          choco install ninja --version 1.10.2
          choco install mingw
          choco install cygwin
          choco install cyg-get
          cyg-get automake gcc-g++ make binutils --verbose

      - name: Set up MSYS2
        uses: msys2/setup-msys2@v2
        with:
          update: false
          install: >
            mingw-w64-x86_64-toolchain
            mingw-w64-i686-toolchain
            base-devel
            gcc
            autoconf-wrapper
            automake

      - name: Install VS 15 2017 Community edition
        run: |
          Invoke-WebRequest -Uri "https://aka.ms/vs/15/release/vs_community.exe" -OutFile "vs_installer.exe"
          Start-Process -FilePath ".\vs_installer.exe" -ArgumentList `
           "--quiet",  "--wait", "--norestart", "--nocache", `
           "--add", "Microsoft.VisualStudio.Component.VC.Tools.x86.x64", `
           "--add", "Microsoft.VisualStudio.Component.Windows81SDK", `
           "--add", "Microsoft.VisualStudio.ComponentGroup.NativeDesktop.Core", `
           "--add", "Microsoft.Component.MSBuild", `
           "--add", "Microsoft.VisualStudio.Component.VC.CMake.Project", `
           "--add", "Microsoft.VisualStudio.Workload.NativeDesktop", `
           "--add", "Microsoft.VisualStudio.Component.VC.CoreBuildTools", `
           "--add", "Microsoft.VisualStudio.Component.VC.ATLMFC" -Wait

      - name: Cache CMake and Bazel installations
        id: cache-tools
        uses: actions/cache@v4
        with:
          path: |
            C:\tools\cmake\3.15.7
            C:\tools\cmake\3.19.7
            C:\tools\cmake\3.23.5
            C:\tools\bazel\6.3.2
            C:\tools\bazel\7.1.2
          key: ${{ runner.os }}-conan-tools-cache

      - name: Build CMake old versions of CMake
        if: steps.cache-tools.outputs.cache-hit != 'true'
        run: |
          $CMAKE_BUILD_VERSIONS = "3.15.7", "3.19.7"
          foreach ($version in $CMAKE_BUILD_VERSIONS) {
            Write-Host "Downloading CMake version $version for Windows..."
            $destination = "C:\tools\cmake\$version"
            if (-not (Test-Path $destination)) {
                New-Item -Path $destination -ItemType Directory
            }
            $major_minor_version = ($version -split '\.')[0..1] -join '.'
            $url = "https://cmake.org/files/v$major_minor_version/cmake-$version-win64-x64.zip"
            $zipFile = "cmake-$version-windows-x86_64.zip"
            Invoke-WebRequest -Uri $url -OutFile $zipFile
            Expand-Archive -Path $zipFile -DestinationPath $destination -Force
            Remove-Item $zipFile
          }
      - name: Install modern CMake versions
        if: steps.cache-tools.outputs.cache-hit != 'true'
        run: |
          $CMAKE_BUILD_VERSIONS = "3.23.5"
          foreach ($version in $CMAKE_BUILD_VERSIONS) {
            $destination = "C:\tools\cmake\$version"
            if (-not (Test-Path $destination)) {
                New-Item -Path $destination -ItemType Directory
            }
            $major_minor_version = ($version -split '\.')[0..1] -join '.'
            $url = "https://cmake.org/files/v$major_minor_version/cmake-$version-windows-x86_64.zip"
            $zipFile = "cmake-$version-windows-x86_64.zip"
            Invoke-WebRequest -Uri $url -OutFile $zipFile
            Expand-Archive -Path $zipFile -DestinationPath $destination -Force
            Remove-Item $zipFile
          }
      - name: Install Bazel versions
        if: steps.cache-tools.outputs.cache-hit != 'true'
        run: |
          $BAZEL_BUILD_VERSIONS = "6.3.2", "7.1.2"
          foreach ($version in $BAZEL_BUILD_VERSIONS) {
              Write-Host "Downloading Bazel version $version for Windows..."
              $destination = "C:\tools\bazel\$version"
              if (-not (Test-Path $destination)) {
                  New-Item -Path $destination -ItemType Directory
              }
              $major_minor_version = ($version -split '\.')[0..1] -join '.'
              $url = "https://github.com/bazelbuild/bazel/releases/download/$version/bazel-$version-windows-x86_64.zip"
              $zipFile = "bazel-$version-windows-x86_64.zip"
              Invoke-WebRequest -Uri $url -OutFile $zipFile
              Expand-Archive -Path $zipFile -DestinationPath $destination -Force
              Remove-Item $zipFile
          }

      - name: Run Tests
        run: |
          $shortGuid = [System.Guid]::NewGuid().ToString().Substring(0, 4)
          $randomFolder = [System.IO.Path]::Combine("D:\\", "tmp_tests", $shortGuid)
          New-Item -ItemType Directory -Force -Path $randomFolder
          $env:CONAN_TEST_FOLDER = $randomFolder
          pytest test/ --durations=20 --numprocesses=auto
