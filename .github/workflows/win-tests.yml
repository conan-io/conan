name: Windows Tests

on:
  push:
    branches:
      - develop2
      - release/*
  pull_request:
    branches:
      - '*'

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  testing:
    strategy:
      fail-fast: true
      matrix:
        python-version: ['3.9']
        test-type: [unittests, integration, functional]

    runs-on: windows-2019

    name: Conan (${{ matrix.test-type }}) (${{ matrix.python-version }})

    steps:

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache pip packages
        uses: actions/cache@v4
        with:
          path: C:\Users\runneradmin\AppData\Local\pip\cache
          key: pip-packages-${{ runner.os }}-${{ hashFiles('conans/requirements*.txt') }}
          restore-keys: |
            pip-packages-${{ runner.os }}-

      - name: Cache Chocolatey packages
        if: matrix.test-type == 'functional'
        uses: actions/cache@v4
        with:
          path: C:\ProgramData\chocolatey\lib
          key: chocolatey-packages-${{ runner.os }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            chocolatey-packages-${{ runner.os }}-

      - name: Cache Cygwin packages
        if: matrix.test-type == 'functional'
        uses: actions/cache@v4
        with:
          path: C:\tools\cygwin\etc\setup
          key: cygwin-packages-${{ runner.os }}-${{ hashFiles('installed.db') }}
          restore-keys: |
            cygwin-packages-${{ runner.os }}-

      - name: Install Python requirements
        run: |
          pip install --upgrade pip
          pip install -r conans/requirements.txt
          pip install -r conans/requirements_server.txt
          pip install -r conans/requirements_dev.txt
          pip install meson

      - name: Install Chocolatey packages
        if: matrix.test-type == 'functional'
        run: |
          choco install pkgconfiglite --version 0.28
          choco install ninja --version 1.10.2
          choco install mingw
          choco install visualstudio2017community --package-parameters '--allWorkloads --includeRecommended --includeOptional --passive --locale en-US'
          choco install cygwin
          choco install cyg-get

      - name: Install Cygwin extra packages
        if: matrix.test-type == 'functional'
        run: |
          cyg-get default automake gcc-g++ make binutils

      - name: Cache CMake and Bazel installations
        if: matrix.test-type == 'functional'
        id: cache-tools
        uses: actions/cache@v4
        with:
          path: |
            C:\Tools\CMake\3.15.7
            C:\Tools\CMake\3.19.7
            C:\Tools\CMake\3.23.5
            C:\Tools\bazel\6.3.2
            C:\Tools\bazel\7.1.2
          key: ${{ runner.os }}-conan-tools-cache

      - name: Build CMake old versions of CMake
        if: matrix.test-type == 'functional' && steps.cache-tools.outputs.cache-hit != 'true'
        run: |
          $CMAKE_BUILD_VERSIONS = "3.15.7", "3.19.7"
          foreach ($version in $CMAKE_BUILD_VERSIONS) {
            Write-Host "Downloading CMake version $version for Windows..."
            $destination = "C:\Tools\CMake\$version"
            if (-not (Test-Path $destination)) {
                New-Item -Path $destination -ItemType Directory
            }
            $major_minor_version = ($version -split '\.')[0..1] -join '.'
            $url = "https://cmake.org/files/v$major_minor_version/cmake-$version-win64-x64.zip"
            $zipFile = "cmake-$version-windows-x86_64.zip"
            Invoke-WebRequest -Uri $url -OutFile $zipFile
            Expand-Archive -Path $zipFile -DestinationPath $destination -Force
            Remove-Item $zipFile
          }
      - name: Install modern CMake versions
        if: matrix.test-type == 'functional' && steps.cache-tools.outputs.cache-hit != 'true'
        run: |
          $CMAKE_BUILD_VERSIONS = "3.23.5"
          foreach ($version in $CMAKE_BUILD_VERSIONS) {
            $destination = "C:\Tools\CMake\$version"
            if (-not (Test-Path $destination)) {
                New-Item -Path $destination -ItemType Directory
            }
            $major_minor_version = ($version -split '\.')[0..1] -join '.'
            $url = "https://cmake.org/files/v$major_minor_version/cmake-$version-windows-x86_64.zip"
            $zipFile = "cmake-$version-windows-x86_64.zip"
            Invoke-WebRequest -Uri $url -OutFile $zipFile
            Expand-Archive -Path $zipFile -DestinationPath $destination -Force
            Remove-Item $zipFile
          }
      - name: Install Bazel versions
        if: matrix.test-type == 'functional' && steps.cache-tools.outputs.cache-hit != 'true'
        run: |
          $BAZEL_BUILD_VERSIONS = "6.3.2", "7.1.2"
          foreach ($version in $BAZEL_BUILD_VERSIONS) {
              Write-Host "Downloading Bazel version $version for Windows..."
              $destination = "C:\Tools\bazel\$version"
              if (-not (Test-Path $destination)) {
                  New-Item -Path $destination -ItemType Directory
              }
              $major_minor_version = ($version -split '\.')[0..1] -join '.'
              $url = "https://github.com/bazelbuild/bazel/releases/download/$version/bazel-$version-windows-x86_64.zip"
              $zipFile = "bazel-$version-windows-x86_64.zip"
              Invoke-WebRequest -Uri $url -OutFile $zipFile
              Expand-Archive -Path $zipFile -DestinationPath $destination -Force
              Remove-Item $zipFile
          }
      - name: Run Tests
        run: |
          $matrixTestType = "${{ matrix.test-type }}"
          if ($matrixTestType -eq "unittests") {
              Write-Host "pytest test/unittests --durations=20"
          } elseif ($matrixTestType -eq "integration") {
              Write-Host "pytest test/integration --durations=20"
          } elseif ($matrixTestType -eq "functional") {
              Write-Host "pytest test/functional --durations=20"
          }
