name: OSX Tests

on:
  push:
    branches:
      - develop2
      - release/*
      - ci/gh-action-osx
  pull_request:
    branches:
      - '*'

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  testing:
    strategy:
      fail-fast: true
      matrix:
        test-type: [functional]
        python-version: ['3.9']

    runs-on: macos-14

    name: Conan ${{ matrix.test-type }} (${{ matrix.python-version }})

    steps:

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Python requirements
        run: |
          pip install --upgrade pip
          pip install -r conans/requirements.txt
          pip install -r conans/requirements_server.txt
          pip install -r conans/requirements_dev.txt
          pip install meson

      - name: Install homebrew dependencies
        run: |
          brew install xcodegen make libtool zlib autoconf automake ninja
          brew uninstall cmake || true

      # - name: Cache CMake installations
      #   id: cache-cmake
      #   uses: actions/cache@v4
      #   with:
      #     path: ${HOME}/Applications/CMake/3.15.7
      #     key: conan-cmake-3.15

      # - name: Build CMake old versions not available for arm
      #   if: steps.cache-cmake.outputs.cache-hit != 'true'
      #   run: |
      #     set -e

      #     CMAKE_BUILD_VERSIONS=("3.15.7")
      #     #CMAKE_BUILD_VERSIONS=("3.15.7" "3.16.9" "3.17.5")
      #     for version in "${CMAKE_BUILD_VERSIONS[@]}"; do
      #       echo "Compiling CMake version ${version} from source for ARM..."
      #       wget -q --no-check-certificate https://cmake.org/files/v${version%.*}/cmake-${version}.tar.gz
      #       tar -xzf cmake-${version}.tar.gz
      #       cd cmake-${version}
      #       mkdir build && cd build
      #       ../bootstrap --prefix=${HOME}/Applications/CMake/${version} -- -DCMAKE_USE_OPENSSL=ON
      #       make -j$(sysctl -n hw.ncpu)
      #       make install
      #       ${HOME}/Applications/CMake/${version}/bin/cmake --version
      #       cd ../../
      #       rm -rf cmake-${version} cmake-${version}.tar.gz
      #     done

      - name: Install universal CMake versions
        if: steps.cache-cmake.outputs.cache-hit != 'true'
        run: |
          set -e

          CMAKE_PRECOMP_VERSIONS=("3.19.7" "3.23.1")
          for version in "${CMAKE_PRECOMP_VERSIONS[@]}"; do
            echo "Downloading and installing precompiled universal CMake version ${version}..."
            wget -q --no-check-certificate https://cmake.org/files/v${version%.*}/cmake-${version}-macos-universal.tar.gz
            tar -xzf cmake-${version}-macos-universal.tar.gz \
              --exclude=CMake.app/Contents/bin/cmake-gui \
              --exclude=CMake.app/Contents/doc/cmake \
              --exclude=CMake.app/Contents/share/cmake-${version%.*}/Help \
              --exclude=CMake.app/Contents/share/vim
            mkdir -p ${HOME}/Applications/CMake/${version}
            cp -fR cmake-${version}-macos-universal/CMake.app/Contents/* ${HOME}/Applications/CMake/${version}
            ${HOME}/Applications/CMake/${version}/bin/cmake --version
            rm -rf cmake-${version}-macos-universal
            rm cmake-${version}-macos-universal.tar.gz
          done

      - name: Install Bazel versions
        run: |
          set -e
          for version in 6.3.2 7.1.2; do
            mkdir -p ${HOME}/Applications/bazel/${version}
            wget -q -O ${HOME}/Applications/bazel/${version}/bazel https://github.com/bazelbuild/bazel/releases/download/${version}/bazel-${version}-darwin-arm64
            chmod +x ${HOME}/Applications/bazel/${version}/bazel
          done

      - name: Run Test - ${{ matrix.test-type }}
        shell: bash
        run: |
          #export PATH=${HOME}/Applications/CMake/3.15.7/bin:$PATH:/usr/local/bin:/opt/homebrew/bin:/usr/bin:/bin:/usr/sbin:/sbin
          #which cmake
          #cmake --version
          sudo xcode-select -s /Applications/Xcode_16.app
          echo $CC
          echo $CXX
          if [ "${{ matrix.test-type }}" == "unittests" ]; then
            pytest test/unittests --durations=20
          elif [ "${{ matrix.test-type }}" == "integration" ]; then
            pytest test/integration --durations=20
          elif [ "${{ matrix.test-type }}" == "functional" ]; then
            pytest test/functional/toolchains/cmake/cmakedeps/test_apple_frameworks.py::test_apple_framework_xcode -v --durations=20
            pytest test/functional/toolchains/cmake/cmakedeps/test_cmakedeps.py::test_error_missing_build_type -v --durations=20
            pytest test/functional/toolchains/cmake/cmakedeps/test_link_order.py::test_cmake_deps -v --durations=20
          fi
